Best Practices
- capitalise the component name or folder names in the project.
- use ES6/ES7 or Next gen javascript syntaxes goind forward in React. Always try to use ES6/7 arrow functions
- when creating components, you have the choice between two different ways:
    --Functional components (also referred to as "presentational", "dumb" or "stateless" components) =>
        const cmp = () => {
            return <div>some JSX</div> 
            } 
    --class-based components (also referred to as "containers", "smart" or "stateful" components) => 
        class Cmp extends Component 
        { 
            render () 
            { 
                return <div>some JSX</div> 
            } 
        }
    Use functional components as often as possible. It makes code easy to maintain. 
    Now prior to react -v 16.8 , there class based components was the only way to manage state of the component. But Since then with React Hooks,
    state can be managed in functional components. Most of the projects use class based components for state management. Its a more traditional way. 
    React Hooks may or may be be the way forward to manage state but is an option to do so.

- methods called from events should be named as methodNameHandler ( with word Handler at the end) 

Notes
- using "create-react-app" to create new application
    install NodeJS from NodeJS.org.
    npm install -g create-areact-app
    --to create new project, navigate to the directory where you want to create the project,use the command
        "create-react-app <appname>"
        <optional> --scripts-version 1.1.15
        ( this version number does not effect the version on Rect , but the folder structure. Can very in latest versions)
        use npm start and npm build commands to run the app or if yarn is installed use yarn commands.
- there should always be one root element in each component.
- cannot use keyword Class to apply styles , this is reserved keyword for classes, use 'ClassName'.
- each component needs to return/ render some JSX code - it defines which HTML code React should render to the real DOM in the end.
- props  allow you to pass data from a parent (wrapping) component to a child (embedded) component.
- state is used to change the state of component from inside the component
- changes in props  and/or state  trigger React to re-render your components and potentially update the DOM in the browser 
- setState only changes the state of the property that is updated in setState, if there are other properties in original State, 
  those will not be touched or discarded or updated.
- React Hooks
    --React Hooks is a set of functions exposed by React to manage the state in functional components.
    --Managing state in Class component setState only changes the state of the property that is updated in setState, 
        if there are other properties in original State, those will not be touched or discarded or updated. 
        In functional component(using Hooks) is the useState will discard the current state and replace it with new state, 
        so all the states have to be updated again else they will be lost.

- components not maintaining state are called stateless components, they take data from a statefull component and present it.

- Evert list in React needs a unique key to be specified in the component/model. If we are doing any operations, react will compare this key with the original state and render accordingly.
  if unique key is not supplied then react throws a warning and this is inefficient for long lists of data.
  So the data rendered from database or from any source should always include unique identified.

-styles
    -- Use RADIUM for styling Pseudo classes and mesdia quesries.
    -- Need to wrap the export class wth RADIUM
    -- If using mesia queries then wrap the entir app with <Styleroot> tag.




Reference Links
    create-react-app: https://github.com/facebookincubator/create-react-app
    Introducing JSX: https://reactjs.org/docs/introducing-jsx.html
    Rendering Elements: https://reactjs.org/docs/rendering-elements.html
    Components & Props: https://reactjs.org/docs/components-and-props.html
    Listenable Events: https://reactjs.org/docs/events.html
    https://www.geekstrick.com/lesson/react-introduction/
    